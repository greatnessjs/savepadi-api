model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PayoutMethod {
  FIRST_COME
  RANDOM
}

enum ThriftGroupStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

enum PayoutStatus {
  NONE
  INITIAL_SENT
  COMPLETED
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum WalletType {
  MAIN
  THRIFT
  CONTRIBUTION
}

enum TransactionType {
  FUND
  WITHDRAW
  CONTRIBUTE
  PAYOUT
  TRANSFER
  LOCK
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContributionStatus {
  OPEN
  APPROVED
  DISBURSED
  CANCELED
}

enum DisputeStatus {
  OPEN
  RESOLVED
  REJECTED
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  middleName    String?
  email         String    @unique
  phone         String    @unique
  password      String
  kycStatus     KYCStatus @default(PENDING)
  isVerified    Boolean   @default(false)
  emailToken    String?
  pin           String?
  hasPin        Boolean   @default(false)
  isBvnVerified Boolean   @default(false)
  isDisabled    Boolean   @default(false)
  isAdmin       Boolean   @default(false)

  kyc                KYC[]
  wallet             Wallet[]
  friends            Friend[]                  @relation("UserFriends")
  friendOf           Friend[]                  @relation("UserFriendOf")
  thriftGroups       ThriftGroupMember[]
  contributionGroups ContributionGroupMember[]
  disputesRaised     Dispute[]                 @relation("RaisedBy")
  disputesAgainst    Dispute[]                 @relation("AgainstUser")
  messages           Message[]
  approver           ContributionApproval[]    @relation("UserApprovals")
  notifications      Notification[]
  createdAt          DateTime                  @default(now())
}

model Wallet {
  id        Int        @id @default(autoincrement())
  userId    Int
  type      WalletType
  available Float      @default(0)
  locked    Float      @default(0)

  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@unique([userId, type])
}

model KYC {
  id                 Int     @id @default(autoincrement())
  userId             Int
  bvn                String? @unique
  governmentIssuedId String?
  utilityBill        String?
  passport           String?

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id        Int               @id @default(autoincrement())
  walletId  Int
  type      TransactionType
  amount    Float
  status    TransactionStatus
  createdAt DateTime          @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model Friend {
  id         Int          @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     FriendStatus
  createdAt  DateTime     @default(now())

  sender   User @relation("UserFriends", fields: [senderId], references: [id])
  receiver User @relation("UserFriendOf", fields: [receiverId], references: [id])
}

model ThriftGroup {
  id                      Int               @id @default(autoincrement())
  name                    String
  amount                  Float
  adminId                 Int
  payoutMethod            PayoutMethod
  status                  ThriftGroupStatus @default(ACTIVE)
  initialPayoutPercentage Float             @default(50)

  members   ThriftGroupMember[]
  createdAt DateTime            @default(now())
}

model ThriftGroupMember {
  id            Int          @id @default(autoincrement())
  userId        Int
  groupId       Int
  order         Int?
  received      Boolean      @default(false)
  contributed   Boolean      @default(false)
  initialPayout Float?
  finalPayout   Float?
  payoutStatus  PayoutStatus @default(NONE)

  user  User        @relation(fields: [userId], references: [id])
  group ThriftGroup @relation(fields: [groupId], references: [id])
}

model ContributionGroup {
  id                 Int                @id @default(autoincrement())
  title              String
  description        String?
  adminId            Int
  recipientId        Int
  amount             Float
  status             ContributionStatus @default(OPEN)
  approvalsNeeded    Int                @default(3)
  disburseOnApproval Boolean            @default(false)

  members   ContributionGroupMember[]
  approvals ContributionApproval[]
  createdAt DateTime                  @default(now())
}

model ContributionGroupMember {
  id          Int     @id @default(autoincrement())
  userId      Int
  groupId     Int
  approved    Boolean @default(false)
  contributed Boolean @default(false)

  user  User              @relation(fields: [userId], references: [id])
  group ContributionGroup @relation(fields: [groupId], references: [id])
}

model ContributionApproval {
  id         Int @id @default(autoincrement())
  groupId    Int
  approverId Int

  group    ContributionGroup @relation(fields: [groupId], references: [id])
  approver User              @relation("UserApprovals", fields: [approverId], references: [id])

  @@unique([groupId, approverId])
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int
  groupId   Int
  content   String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id])
}

model Dispute {
  id            Int           @id @default(autoincrement())
  raisedById    Int
  againstUserId Int
  groupId       Int
  reason        String
  evidence      String?
  status        DisputeStatus @default(OPEN)
  createdAt     DateTime      @default(now())

  raisedBy    User @relation("RaisedBy", fields: [raisedById], references: [id])
  againstUser User @relation("AgainstUser", fields: [againstUserId], references: [id])
}
